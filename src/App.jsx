import React, { useMemo, useState } from "react";

/***************************************************
 * DANDY CRM/–ê–†–ú ‚Äî DEMO SPA (CLEAN & FIXED)
 * –î–≤–µ –ø–∞–Ω–µ–ª–∏: –ê–¥–º–∏–Ω/–ö–∞—Å—Å–∏—Ä –∏ –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –≤–∏—Ç—Ä–∏–Ω–∞
 * ‚Äî –ë–µ–∑ TypeScript
 * ‚Äî –ó–∞–∫—Ä—ã—Ç—ã –≤—Å–µ —Ç–µ–≥–∏/—Å–∫–æ–±–∫–∏/—Å—Ç—Ä–æ–∫–∏
 * ‚Äî –ó–∞–≤–µ—Ä—à–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã/—Ü–∏–∫–ª—ã
 ***************************************************/

// ===== –¢–µ–º–∞ =====
const COLORS = {
  bg: "#0b5c3b",
  card: "#ffffff",
  accent: "#ffd24d",
  green: "#22c55e",
  blue: "#3b82f6",
  red: "#ef4444",
  yellow: "#f59e0b",
  muted: "#eaf3ee",
};

// ===== i18n (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ) =====
const DICT = {
  ru: {
    dashboard: "–î–∞—à–±–æ—Ä–¥",
    menu: "–ú–µ–Ω—é –∏ —Ç–æ–≤–∞—Ä—ã",
    orders: "–ó–∞–∫–∞–∑—ã",
    kds: "KDS",
    stock: "–°–∫–ª–∞–¥",
    cashierReport: "–û—Ç—á—ë—Ç –∫–∞—Å—Å–∏—Ä–∞",
    pos: "–ö–∞—Å—Å–∞/–ö–ö–¢",
    edo: "–≠–î–û",
    mercury: "–ú–µ—Ä–∫—É—Ä–∏–π",
    honest: "–ß–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫",
    egais: "–ï–ì–ê–ò–°",
    couriers: "–ö—É—Ä—å–µ—Ä—ã",
    inventory: "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è",
    pricing: "–ü–µ—Ä–µ—Å—á—ë—Ç —Ü–µ–Ω",
    marketing: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    client: "–ö–ª–∏–µ–Ω—Ç",
    integrations: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
    reports: "–û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å",
    alerts: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    profile: "–ü—Ä–æ—Ñ–∏–ª—å",
  },
  en: {
    dashboard: "Dashboard",
    menu: "Menu & Products",
    orders: "Orders",
    kds: "KDS",
    stock: "Stock",
    cashierReport: "Cashier report",
    pos: "POS/Fiscal",
    edo: "EDO",
    mercury: "Mercury",
    honest: "HonestSign",
    egais: "EGAIS",
    couriers: "Couriers",
    inventory: "Inventory",
    pricing: "Repricing",
    marketing: "Marketing",
    client: "Client",
    integrations: "Integrations",
    reports: "Reports",
    alerts: "Alerts",
    profile: "Profile",
  },
};

// ===== –ö–æ—Ä–µ–Ω—å =====
export default function App() {
  const [authed, setAuthed] = useState(false);
  const [lang, setLang] = useState("ru");
  const [account, setAccount] = useState({ email: "111", password: "111", site: "111", role: "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" });

  function handleLogin(e) {
    if (e) e.preventDefault();
    if (account.email === "111" && account.password === "111" && account.site === "111") setAuthed(true);
    else alert("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 111 / 111 / 111");
  }

  if (!authed) return <Login account={account} onChange={setAccount} onSubmit={handleLogin} onDemo={() => setAuthed(true)} />;

  return (
    <Shell
      email={account.email}
      site={account.site}
      role={account.role}
      lang={lang}
      setLang={setLang}
    />
  );
}

// ===== Login =====
function Login({ account, onChange, onSubmit, onDemo }) {
  return (
    <div className="min-h-screen flex items-center justify-center" style={{ background: COLORS.muted }}>
      <form onSubmit={onSubmit} className="w-full max-w-xl rounded-2xl shadow-lg p-8" style={{ background: COLORS.card }}>
        <div className="flex items-center gap-3 mb-6"><Rabbit /><BrandTitle /></div>
        <h1 className="text-3xl font-extrabold mb-6" style={{ color: COLORS.bg }}>–í–•–û–î</h1>
        <LabeledInput label="E-mail" placeholder="example@mail.ru" value={account.email} onChange={(v)=>onChange({ ...account, email:v })} />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <LabeledInput type="password" label="–ü–∞—Ä–æ–ª—å" placeholder="–ü–∞—Ä–æ–ª—å" value={account.password} onChange={(v)=>onChange({ ...account, password:v })} />
          <LabeledInput label="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: dandypizza.com" value={account.site} onChange={(v)=>onChange({ ...account, site:v })} />
        </div>
        <div className="flex items-center gap-6 mt-4">
          <Radio checked={account.role==="–∫–∞—Å—Å–∏—Ä"} onChange={()=>onChange({ ...account, role:"–∫–∞—Å—Å–∏—Ä" })}>–ö–∞—Å—Å–∏—Ä</Radio>
          <Radio checked={account.role==="–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"} onChange={()=>onChange({ ...account, role:"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" })}>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</Radio>
        </div>
        <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-3">
          <button type="submit" className="w-full py-3 rounded-full text-white text-lg font-bold" style={{ background: COLORS.bg }}>–í–æ–π—Ç–∏</button>
          <button type="button" onClick={onDemo} className="w-full py-3 rounded-full text-lg font-bold" style={{ background: "#ffffff", color: COLORS.bg, border: "2px solid #0b5c3b" }}>–í–æ–π—Ç–∏ –¥–µ–º–æ</button>
        </div>
        <p className="text-center text-sm text-gray-500 mt-3">–¢–µ—Å—Ç: 111 / 111 / 111</p>
      </form>
    </div>
  );
}

// ===== Shell (layout + routing) =====
function Shell({ email, site, role, lang, setLang }) {
  const t = (k)=> (DICT[lang]||DICT.ru)[k] || k;
  const [route, setRoute] = useState("dashboard");

  // –û–±—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –∏ –≤–∏—Ç—Ä–∏–Ω—ã)
  const [dishes, setDishes] = useState([
    { id:1, name:"–ü–µ–ø–ø–µ—Ä–æ–Ω–∏ 30 —Å–º", cat:"–ü–∏—Ü—Ü–∞", price:399, cost:180 },
    { id:2, name:"–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è", cat:"–†–æ–ª–ª—ã", price:459, cost:220 },
  ]);
  const [products, setProducts] = useState([
    { id:1001, name:"–°–æ—É—Å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π", cat:"–°–æ—É—Å—ã", price:49, cost:15, sku:"SAUCE-001" },
  ]);

  const menu = useMemo(()=>[
    ["dashboard", t("dashboard")], ["menu", t("menu")], ["orders", t("orders")], ["kds", t("kds")], ["stock", t("stock")], ["cashier-report", t("cashierReport")], ["pos", t("pos")], ["edo", t("edo")], ["mercury", t("mercury")], ["honest", t("honest")], ["egais", t("egais")], ["couriers", t("couriers")], ["inventory", t("inventory")], ["pricing", t("pricing")], ["marketing", t("marketing")], ["client", t("client")], ["integrations", t("integrations")], ["reports", t("reports")], ["alerts", t("alerts")], ["profile", t("profile")],
  ],[lang]);

  const catalogItems = useMemo(()=>{
    const a = dishes.map(d=>({id:d.id,name:d.name,cat:d.cat,price:d.price,photo:d.photo}));
    const b = products.map(p=>({id:p.id,name:p.name,cat:p.cat,price:p.price,photo:p.photo}));
    return [...a,...b];
  },[dishes,products]);

  function updateCatalogItem(itemId, updater){
    setDishes(prev=>prev.map(d=>d.id===itemId? updater({ ...d }) : d));
    setProducts(prev=>prev.map(p=>p.id===itemId? updater({ ...p }) : p));
  }

  return (
    <div className="min-h-screen" style={{ background: COLORS.bg }}>
      {/* Header */}
      <div className="px-4 md:px-6 py-3" style={{ background: COLORS.bg }}>
        <div className="max-w-[1400px] mx-auto flex items-center gap-3">
          <Rabbit /><BrandTitle />
          <div className="ml-auto flex items-center gap-2">
            <button onClick={()=>setRoute('client')} className={`px-4 py-2 rounded-full text-sm ${route==='client'?'bg-emerald-600 text-white':'bg-white/10 text-white hover:bg-white/20'}`}>–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–∞–π—Ç</button>
            <button onClick={()=>setRoute('dashboard')} className={`px-4 py-2 rounded-full text-sm ${route!=='client'?'bg-emerald-600 text-white':'bg-white/10 text-white hover:bg-white/20'}`}>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</button>
            {route!=="client" && (
              <div className="hidden md:flex items-center gap-2 px-3 py-1 rounded-full bg-white/10 text-white">
                <span>üìû</span><span className="font-semibold">+7 (925) 934-77-28</span><span className="text-white/80 text-xs ml-1">—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</span>
              </div>
            )}
            <LangSwitch lang={lang} setLang={setLang} />
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-[280px_1fr] gap-0 mt-4">
        {/* Sidebar */}
        <aside className="px-3 md:px-4 md:py-4" style={{ background: COLORS.bg }}>
          <nav className="space-y-1">
            {menu.map(([key,label])=> (
              <button key={key} onClick={()=>setRoute(key)} className={`w-full text-left px-4 py-3 rounded-xl text-white/90 hover:bg-white/10 ${route===key? 'bg-white/15':''}`}>{label}</button>
            ))}
          </nav>
        </aside>

        {/* Main */}
        <main className="p-5 md:p-8 bg-[#0f6b49] rounded-t-2xl md:rounded-l-2xl" style={{ minHeight: "calc(100vh - 120px)" }}>
          <div className="space-y-6">
            {route==="dashboard" && <Dashboard />}
            {route==="menu" && <MenuDishes dishes={dishes} setDishes={setDishes} products={products} setProducts={setProducts} />}
            {route==="orders" && <Orders />}
            {route==="kds" && <KDS />}
            {route==="stock" && <Stock />}
            {route==="cashier-report" && <CashierReport />}
            {route==="pos" && <POS items={catalogItems} onUpdateItem={updateCatalogItem} />}
            {route==="edo" && <EDO />}
            {route==="mercury" && <Mercury />}
            {route==="honest" && <HonestSign />}
            {route==="egais" && <EGAIS />}
            {route==="couriers" && <Couriers />}
            {route==="inventory" && <Inventory />}
            {route==="pricing" && <Pricing />}
            {route==="marketing" && <Marketing />}
            {route==="client" && <ClientPanel items={catalogItems} />}
            {route==="integrations" && <Integrations />}
            {route==="reports" && <ReportsPage />}
            {route==="alerts" && <Alerts />}
            {route==="profile" && <Profile />}
          </div>
        </main>
      </div>
    </div>
  );
}

// ===== UI helpers =====
function BrandTitle(){
  return (
    <div className="text-white">
      <div className="text-2xl md:text-3xl font-extrabold leading-none">–î–≠–ù–î–ò</div>
      <div className="text-xs opacity-80">–ü–ò–¶–¶–ê –ò –°–£–®–ò</div>
    </div>
  );
}
function Rabbit(){ return (<div className="w-9 h-9 md:w-11 md:h-11 rounded-full bg-pink-300 flex items-center justify-center shadow" title="–∑–∞–π—á–∏–∫">üê∞</div>); }
function LabeledInput({label,placeholder,value,onChange,type="text"}){ return (<div className="mb-4"><div className="text-sm font-medium mb-1">{label}</div><input type={type} placeholder={placeholder} value={value} onChange={(e)=>onChange(e.target.value)} className="w-full rounded-xl border border-gray-200 px-4 py-3 focus:outline-none focus:ring-2"/></div>); }
function Radio({checked,onChange,children}){ return (<label className="inline-flex items-center gap-2 cursor-pointer"><input type="radio" checked={checked} onChange={onChange}/><span>{children}</span></label>); }
function Card({title,children,tone}){ const style=tone==="alert"?{borderLeft:"6px solid #ef4444"}:tone==="warn"?{borderLeft:"6px solid #f59e0b"}:{ }; return (<div className="bg-white rounded-2xl p-5 shadow-sm" style={style}>{title&&<h3 className="text-lg font-semibold mb-3">{title}</h3>}<div className="text-sm text-gray-800">{children}</div></div>); }
function LangSwitch({lang,setLang}){ return (<div className="flex items-center gap-2"><button onClick={()=>setLang("ru")} className={`px-2 py-1 rounded ${lang==="ru"?"bg-white/20 text-white":"bg-white/10 text-white/70"}`}>RU</button><button onClick={()=>setLang("en")} className={`px-2 py-1 rounded ${lang==="en"?"bg-white/20 text-white":"bg-white/10 text-white/70"}`}>EN</button></div>); }

// ===== Pages =====
function Dashboard(){
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-5">
      <Card title="–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã / –ü–µ—Ä—Å–æ–Ω–∞–ª">–û—Ç–∫—Ä—ã—Ç–∞ ‚Ä¢ –ö–∞—Å—Å–∏—Ä—ã: 2 ‚Ä¢ –ü–æ–≤–∞—Ä–æ–≤: 3 ‚Ä¢ –ö—É—Ä—å–µ—Ä–æ–≤: 4</Card>
      <Card title="–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏">‚ÇΩ 128 540 –≤—ã—Ä—É—á–∫–∞ ‚Ä¢ 144 –∑–∞–∫–∞–∑–æ–≤ ‚Ä¢ 18 –∫—Ä–∏—Ç. –æ—Å—Ç–∞—Ç–∫–∏</Card>
      <Card title="–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è">
        <div className="flex flex-wrap gap-2">
          <button className="px-3 py-2 rounded bg-[#0b5c3b] text-white">–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É</button>
          <button className="px-3 py-2 rounded bg-[#0b5c3b] text-white">–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑</button>
          <button className="px-3 py-2 rounded bg-[#0b5c3b] text-white">–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è</button>
        </div>
      </Card>
      <Card title="–õ–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (live)"><ul className="list-disc ml-5 space-y-1"><li>–ó–∞–∫–∞–∑ #1029 –ø—Ä–∏–Ω—è—Ç (–Ø–Ω–¥–µ–∫—Å –ï–¥–∞)</li><li>–§–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–∫–∞ —É—Å–ø–µ—à–Ω–∞</li><li>–ö—É—Ä—å–µ—Ä –ê–ª–µ–∫—Å–µ–π –ø–µ—Ä–µ–¥–∞–ª –∑–∞–∫–∞–∑ ‚Üí –µ–¥–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ</li></ul></Card>
      <Card title="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã" tone="alert">–û—Å—Ç–∞—Ç–æ–∫ ¬´–õ–æ—Å–æ—Å—å¬ª &lt; 1.0 –∫–≥ ‚Ä¢ –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –Ω–∞–∫–ª–∞–¥–Ω–æ–π ‚Äî –∑–∞–≤—Ç—Ä–∞</Card>
      <Card title="–ü–ª–∞—Ç—ë–∂–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å">–°–µ–≥–æ–¥–Ω—è: –∞—Ä–µ–Ω–¥–∞; –∑–∞–≤—Ç—Ä–∞: –û–§–î; 25.09 ‚Äî –£–°–ù</Card>
    </div>
  );
}

function MenuDishes({dishes,setDishes,products,setProducts}){
  const [tab,setTab]=useState('dishes');
  const [form,setForm]=useState({name:"",cat:"",desc:"",price:0,cost:0,mods:"",alrg:"",nutrition:"",photo:"",sku:""});

  const add=()=>{
    if(!form.name) return;
    if(tab==='dishes') setDishes(prev=>[...prev,{id:Date.now(),name:form.name,cat:form.cat,price:+form.price,cost:+form.cost,desc:form.desc,mods:form.mods?form.mods.split(",").map(s=>s.trim()):[],photo:form.photo,alrg:form.alrg,nutrition:form.nutrition}]);
    else setProducts(prev=>[...prev,{id:Date.now(),name:form.name,cat:form.cat,price:+form.price,cost:+form.cost,sku:form.sku||`SKU-${Date.now()}`,photo:form.photo}]);
    setForm({name:"",cat:"",desc:"",price:0,cost:0,mods:"",alrg:"",nutrition:form.nutrition,photo:"",sku:""});
  };

  const onFile=(file)=>{ if(!file) return; const url=URL.createObjectURL(file); setForm(f=>({...f,photo:url})); };

  function importCSV(file){
    const reader=new FileReader();
    reader.onload=()=>{
      try{
        const text=String(reader.result||"");
        const lines=text.split(/\r?\n/).filter(l=>l.trim().length>0);
        if(lines.length<2){ alert("CSV –ø—É—Å—Ç–æ–π"); return; }
        const header=lines[0].split(",").map(h=>h.trim().toLowerCase());
        const idx=(k)=>header.indexOf(k);
        const iType=idx("type"), iName=idx("name"), iCat=idx("category"), iPrice=idx("price"), iCost=idx("cost"), iDesc=idx("desc"), iMods=idx("mods"), iAlrg=idx("alrg"), iNut=idx("nutrition"), iSku=idx("sku"), iPhoto=idx("photo");
        const newD=[], newP=[];
        for (let li = 1; li < lines.length; li++) {
          const raw = lines[li].split(",");
          const type = iType>=0 ? (raw[iType]||"dish").trim().toLowerCase() : "dish";
          const name = (raw[iName]||"").trim(); if(!name) continue;
          const cat = (raw[iCat]||"–ü—Ä–æ—á–µ–µ").trim();
          const price = Number(raw[iPrice]||0);
          const cost = Number(raw[iCost]||0);
          const photo = iPhoto>=0 ? (raw[iPhoto]||"").trim() : "";
          if (type === "product") {
            const sku = (iSku>=0 ? (raw[iSku]||"").trim() : "") || `SKU-${Date.now()}-${li}`;
            newP.push({ id: Date.now()+li, name, cat, price, cost, sku, photo });
          } else {
            const desc = iDesc>=0 ? raw[iDesc] : "";
            const mods = iMods>=0 && raw[iMods] ? String(raw[iMods]).split("|").map(s=>s.trim()) : [];
            const alrg = iAlrg>=0 ? raw[iAlrg] : "";
            const nutrition = iNut>=0 ? raw[iNut] : "";
            newD.push({ id: Date.now()+li, name, cat, price, cost, desc, mods, alrg, nutrition, photo });
          }
        }
        if (newD.length) setDishes(prev=>[...prev, ...newD]);
        if (newP.length) setProducts(prev=>[...prev, ...newP]);
        alert(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: –±–ª—é–¥ ${newD.length}, —Ç–æ–≤–∞—Ä–æ–≤ ${newP.length}`);
      } catch(e) { alert("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ CSV. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø—è—Ç–∞—è –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å."); }
    };
    reader.readAsText(file, 'utf-8');
  }

  function loadSample(){
    const sample = `type,name,category,price,cost,desc,mods,alrg,nutrition,sku,photo\n`+
      `dish,–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ 30 —Å–º,–ü–∏—Ü—Ü–∞,349,160,–ö–ª–∞—Å—Å–∏–∫–∞,–û—Å—Ç—Ä—ã–π —Å–æ—É—Å|–î–æ–ø. —Å—ã—Ä,–º–æ–ª–æ–∫–æ,–±/–∂/—É,,\n`+
      `dish,–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è,–†–æ–ª–ª—ã,429,210,–ö—Ä–∞–±,–°–æ—É—Å —É–Ω–∞–≥–∏|–ö—É–Ω–∂—É—Ç,—Ä—ã–±–∞,–±/–∂/—É,,\n`+
      `product,–ö–æ–ª–∞ 0.5,–ù–∞–ø–∏—Ç–∫–∏,120,40,–ì–∞–∑.–Ω–∞–ø–∏—Ç–æ–∫,,, ,COLA-05,`;
    const blob = new Blob([sample], {type:'text/csv'});
    importCSV(new File([blob], 'sample.csv'));
  }

  return (
    <div className="space-y-4">
      <Card title="–ö–∞—Ç–∞–ª–æ–≥">
        <div className="flex gap-2 mb-3">
          <button onClick={()=>setTab('dishes')} className={`px-3 py-2 rounded ${tab==='dishes'?'bg-[#0b5c3b] text-white':'bg-white'}`}>–ë–ª—é–¥–∞</button>
          <button onClick={()=>setTab('products')} className={`px-3 py-2 rounded ${tab==='products'?'bg-[#0b5c3b] text-white':'bg-white'}`}>–¢–æ–≤–∞—Ä—ã</button>
          <div className="ml-auto flex items-center gap-3">
            <label className="text-sm"><input type="file" accept=".csv" onChange={(e)=>{ const f=e.target.files?.[0]; if(f) importCSV(f); }} /></label>
            <button className="px-3 py-2 rounded bg-gray-100" onClick={loadSample}>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π CSV</button>
          </div>
        </div>
        {tab==='dishes' ? (
          <table className="w-full text-left text-sm"><thead><tr className="text-gray-500"><th className="py-2">–§–æ—Ç–æ</th><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th><th>–¶–µ–Ω–∞</th><th>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</th></tr></thead><tbody>
            {dishes.map(d=>(<tr key={d.id} className="border-t"><td className="py-2">{d.photo?<img src={d.photo} alt="—Ñ–æ—Ç–æ" className="w-10 h-10 object-cover rounded"/>:'‚Äî'}</td><td>{d.name}</td><td>{d.cat}</td><td>‚ÇΩ {d.price}</td><td>‚ÇΩ {d.cost}</td></tr>))}
          </tbody></table>
        ) : (
          <table className="w-full text-left text-sm"><thead><tr className="text-gray-500"><th className="py-2">–§–æ—Ç–æ</th><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th><th>SKU</th><th>–¶–µ–Ω–∞</th><th>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</th></tr></thead><tbody>
            {products.map(p=>(<tr key={p.id} className="border-t"><td className="py-2">{p.photo?<img src={p.photo} alt="—Ñ–æ—Ç–æ" className="w-10 h-10 object-cover rounded"/>:'‚Äî'}</td><td>{p.name}</td><td>{p.cat}</td><td>{p.sku}</td><td>‚ÇΩ {p.price}</td><td>‚ÇΩ {p.cost}</td></tr>))}
          </tbody></table>
        )}
      </Card>

      <Card title={tab==='dishes'?'–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ':'–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'}>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <LabeledInput label="–ù–∞–∑–≤–∞–Ω–∏–µ" placeholder={tab==='dishes'"–ù–∞–ø—Ä–∏–º–µ—Ä: –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è":"–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ—É—Å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π"} value={form.name} onChange={(v)=>setForm({...form,name:v})} />
          <LabeledInput label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" placeholder={tab==='dishes'"–†–æ–ª–ª—ã / –ü–∏—Ü—Ü–∞":"–°–æ—É—Å—ã / –ù–∞–ø–∏—Ç–∫–∏"} value={form.cat} onChange={(v)=>setForm({...form,cat:v})} />
          <LabeledInput label="–¶–µ–Ω–∞, ‚ÇΩ" type="number" value={form.price} onChange={(v)=>setForm({...form,price:v})} />
          <LabeledInput label="–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å, ‚ÇΩ" type="number" value={form.cost} onChange={(v)=>setForm({...form,cost:v})} />
          {tab==='dishes'&&<LabeledInput label="–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã" placeholder="—Å–æ—É—Å, –¥–æ–ø. —Å—ã—Ä" value={form.mods} onChange={(v)=>setForm({...form,mods:v})} />}
          {tab==='dishes'&&<LabeledInput label="–ê–ª–ª–µ—Ä–≥–µ–Ω—ã" placeholder="—Ä—ã–±–∞, –º–æ–ª–æ–∫–æ" value={form.alrg} onChange={(v)=>setForm({...form,alrg:v})} />}
          {tab==='dishes'&&<LabeledInput label="–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å" placeholder="–±–µ–ª–∫–∏/–∂–∏—Ä—ã/—É–≥–ª–µ–≤–æ–¥—ã" value={form.nutrition} onChange={(v)=>setForm({...form,nutrition:v})} />}
          {tab==='products'&&<LabeledInput label="SKU" placeholder="SKU-000" value={form.sku} onChange={(v)=>setForm({...form,sku:v})} />}
          <div><div className="text-sm font-medium mb-1">–û–ø–∏—Å–∞–Ω–∏–µ</div><textarea className="w-full rounded-xl border px-4 py-3" rows={3} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" value={form.desc} onChange={(e)=>setForm({...form,desc:e.target.value})} /></div>
          <div><div className="text-sm font-medium mb-1">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</div><input type="file" accept="image/*" onChange={(e)=>onFile(e.target.files?.[0])} />{form.photo&&<div className="mt-2"><img src={form.photo} alt="–ø—Ä–µ–≤—å—é" className="w-24 h-24 object-cover rounded"/></div>}</div>
        </div>
        <div className="mt-3 flex gap-2"><button onClick={add} className="px-4 py-2 rounded bg-[#0b5c3b] text-white">–î–æ–±–∞–≤–∏—Ç—å</button></div>
        <div className="text-xs text-gray-600 mt-2">CSV-–∫–æ–ª–æ–Ω–∫–∏: type(dish|product), name, category, price, cost, desc, mods("a|b"), alrg, nutrition, sku, photo(URL)</div>
      </Card>
    </div>
  );
}

function Orders(){ const [filter,setFilter]=useState("all"); const rows=useMemo(()=>[{id:1029,client:"–°–º–∏—Ä–Ω–æ–≤–∞ –ò.",amount:880,status:"–ø—Ä–∏–Ω—è—Ç",channel:"–°–∞–π—Ç",courier:"–ê–ª–µ–∫—Å–µ–π",eta:"12 –º–∏–Ω"},{id:1028,client:"–ì—Ä–æ–º–æ–≤ –ü.",amount:1120,status:"–≥–æ—Ç–æ–≤–∏—Ç—Å—è",channel:"–Ø–Ω–¥–µ–∫—Å –ï–¥–∞",courier:"–ú–∞—Ä–∏–Ω–∞",eta:"9 –º–∏–Ω"},{id:1027,client:"–ü–µ—Ç—Ä–æ–≤ –ê.",amount:980,status:"–≥–æ—Ç–æ–≤",channel:"Delivery",courier:"–ü–∞–≤–µ–ª",eta:"‚Äî"},{id:1026,client:"–ó–æ—Ä–∏–Ω–∞ –ù.",amount:750,status:"—É –∫—É—Ä—å–µ—Ä–∞",channel:"–í–∫—É—Å–í–∏–ª–ª",courier:"–ú–∞—Ä–∏–Ω–∞",eta:"7 –º–∏–Ω"},{id:1025,client:"–ö–∞—Ç–∞–µ–≤ –°.",amount:1399,status:"–¥–æ—Å—Ç–∞–≤–ª–µ–Ω",channel:"–°–∞–π—Ç",courier:"‚Äî",eta:"0"}],[]); const visible=rows.filter(r=>filter==="all"||r.status===filter); return(<div className="space-y-4"><Card title="–§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞"><div className="flex flex-wrap gap-2">{[["all","–í—Å–µ"],["–ø—Ä–∏–Ω—è—Ç","–ü—Ä–∏–Ω—è—Ç"],["–≥–æ—Ç–æ–≤–∏—Ç—Å—è","–ì–æ—Ç–æ–≤–∏—Ç—Å—è"],["–≥–æ—Ç–æ–≤","–ì–æ—Ç–æ–≤"],["—É –∫—É—Ä—å–µ—Ä–∞","–£ –∫—É—Ä—å–µ—Ä–∞"],["–¥–æ—Å—Ç–∞–≤–ª–µ–Ω","–î–æ—Å—Ç–∞–≤–ª–µ–Ω"]].map(([k,l])=>(<button key={k} onClick={()=>setFilter(k)} className={`px-3 py-1 rounded-full ${filter===k?"text-white":"text-gray-800"}`} style={{background:filter===k?COLORS.accent:COLORS.card}}>{l}</button>))}</div></Card><Card title="–ó–∞–∫–∞–∑—ã"><table className="w-full text-left text-sm"><thead><tr className="text-gray-500"><th className="py-2">‚Ññ</th><th>–ö–ª–∏–µ–Ω—Ç</th><th>–ö–∞–Ω–∞–ª</th><th>–ö—É—Ä—å–µ—Ä</th><th>ETA</th><th>–°—É–º–º–∞</th><th>–°—Ç–∞—Ç—É—Å</th></tr></thead><tbody>{visible.map(r=>(<tr key={r.id} className="border-t"><td className="py-2">{r.id}</td><td>{r.client}</td><td>{r.channel}</td><td>{r.courier}</td><td>{r.eta}</td><td>‚ÇΩ {r.amount}</td><td><StatusPill status={r.status}/></td></tr>))}</tbody></table></Card></div>);} 
function StatusPill({status}){ const map={"–ø—Ä–∏–Ω—è—Ç":"bg-gray-200","–≥–æ—Ç–æ–≤–∏—Ç—Å—è":"bg-amber-300","–≥–æ—Ç–æ–≤":"bg-green-300","—É –∫—É—Ä—å–µ—Ä–∞":"bg-blue-300","–¥–æ—Å—Ç–∞–≤–ª–µ–Ω":"bg-lime-300"}; return <span className={`px-3 py-1 rounded-full text-xs ${map[status]||"bg-gray-200"}`}>{status}</span>; }

function KDS(){ const tiles=[{id:1,dish:"–ü–µ–ø–ø–µ—Ä–æ–Ω–∏ 30 —Å–º",dept:"–ü–∏—Ü—Ü–∞",timer:"05:12",priority:"–≤—ã—Å–æ–∫–∏–π"},{id:2,dish:"–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è",dept:"–°—É—à–∏",timer:"03:40",priority:"—Å—Ä–µ–¥–Ω–∏–π"}]; return(<div className="grid grid-cols-1 md:grid-cols-2 gap-4">{tiles.map(t=>(<Card key={t.id} title={`${t.dept} ‚Ä¢ ${t.dish}`}>SLA: {t.timer} ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {t.priority} ‚Ä¢ <button className="px-3 py-1 rounded bg-green-100">–ì–æ—Ç–æ–≤–æ</button></Card>))}</div>);} 
function Stock(){return(<div className="space-y-4"><Card title="–û—Å—Ç–∞—Ç–∫–∏">–°–ø–∏—Å–æ–∫ –¢–ú–¶, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤—ã–¥–µ–ª–µ–Ω—ã, FEFO –∏ —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏.</Card><Card title="–ù–∞–∫–ª–∞–¥–Ω—ã–µ">–ò–º–ø–æ—Ä—Ç PDF/JPG/XLS ‚Ä¢ OCR ‚Ä¢ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã ‚Ä¢ –ø–∞—Ä—Ç–∏–∏.</Card><Card title="–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è">–ü–µ—Ä–µ—Å—á—ë—Ç ‚Ä¢ –ø—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π ‚Ä¢ –¥–≤–æ–π–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.</Card></div>);} 
function CashierReport(){return(<div className="space-y-4"><Card title="–°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç –∫–∞—Å—Å–∏—Ä–∞">–°—Ç—Ä–æ–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –º–∞–≥–∞–∑–∏–Ω, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π) ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤ ‚Ä¢ OCR ‚Ä¢ ¬´–ó–∞–≤–µ—Å—Ç–∏ –≤ —É—á—ë—Ç¬ª.</Card><Card title="–ò—Å—Ç–æ—Ä–∏—è">–ß–µ—Ä–Ω–æ–≤–∏–∫ / –ü—Ä–æ–≤–µ—Ä–µ–Ω / –ü—Ä–æ–≤–µ–¥—ë–Ω ‚Ä¢ –∂—É—Ä–Ω–∞–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.</Card></div>);} 

// ===== POS =====
function POS({items,onUpdateItem}){
  const [cat,setCat]=useState('–í—Å–µ'); const cats=useMemo(()=>['–í—Å–µ',...Array.from(new Set(items.map(i=>i.cat)))],[items]);
  const [cart,setCart]=useState([]); const [quickName,setQuickName]=useState(''); const [quickPrice,setQuickPrice]=useState(0);
  const [editingId,setEditingId]=useState(null); const [techDesc,setTechDesc]=useState(''); const [techComp,setTechComp]=useState(''); const [techFiles,setTechFiles]=useState([]); const [techPhoto,setTechPhoto]=useState('');
  const visible=items.filter(i=>cat==='–í—Å–µ'||i.cat===cat); const total=cart.reduce((s,r)=>s+r.price*r.qty,0);
  function addToCart(i){const key=Date.now()+Math.random(); setCart(prev=>[...prev,{key,itemId:i.id,name:i.name,price:i.price,qty:1}]);}
  function addQuick(){ if(!quickName||!quickPrice) return; const key=Date.now()+Math.random(); setCart(prev=>[...prev,{key,itemId:null,name:quickName,price:Number(quickPrice)||0,qty:1}]); setQuickName(''); setQuickPrice(0);} 
  function inc(row){setCart(prev=>prev.map(r=>r.key===row.key?{...r,qty:r.qty+1}:r));} function dec(row){setCart(prev=>prev.map(r=>r.key===row.key?{...r,qty:Math.max(1,r.qty-1)}:r));} function removeRow(row){setCart(prev=>prev.filter(r=>r.key!==row.key));}
  function onTechFiles(files){ if(!files) return; const urls=Array.from(files).map(f=>URL.createObjectURL(f)); setTechFiles(prev=>[...prev,...urls]); }
  function onTechPhoto(file){ if(!file) return; setTechPhoto(URL.createObjectURL(file)); }
  function openTech(item){ setEditingId(item.id); setTechDesc(''); setTechComp(''); setTechFiles([]); setTechPhoto(item.photo||''); }
  function saveTech(){ if(editingId==null) return; onUpdateItem(editingId,d=>({...d,photo:techPhoto||d.photo,tech:{description:techDesc,composition:techComp,files:techFiles}})); setEditingId(null); }
  return(
    <div className="grid grid-cols-1 lg:grid-cols-[200px_1fr_360px] gap-4">
      <Card title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏">
        <div className="flex lg:flex-col gap-2 flex-wrap">{cats.map(c=>(<button key={c} onClick={()=>setCat(c)} className={`px-3 py-2 rounded ${cat===c?'bg-[#0b5c3b] text-white':'bg-white'}`}>{c}</button>))}</div>
        <div className="mt-4">
          <div className="text-sm font-semibold mb-1">–ë—ã—Å—Ç—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è (—Ñ–∏–∫—Å. —Ü–µ–Ω–∞)</div>
          <input placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" className="w-full rounded border px-3 py-2 mb-2" value={quickName} onChange={e=>setQuickName(e.target.value)} />
          <input placeholder="–¶–µ–Ω–∞, ‚ÇΩ" type="number" className="w-full rounded border px-3 py-2 mb-2" value={quickPrice} onChange={e=>setQuickPrice(parseFloat(e.target.value||'0'))} />
          <button onClick={addQuick} className="px-3 py-2 rounded bg-[#0b5c3b] text-white w-full">–î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ–∫</button>
        </div>
      </Card>
      <Card title="–ú–µ–Ω—é">
        <div className="grid grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-3">
          {visible.map(i=>(
            <div key={i.id} className="rounded-xl border bg-white p-3 flex flex-col">
              <div className="flex-1">
                <div className="text-sm font-semibold mb-1">{i.name}</div>
                <div className="text-xs text-gray-500 mb-2">{i.cat}</div>
                {i.photo? <img src={i.photo} alt="—Ñ–æ—Ç–æ" className="w-full h-24 object-cover rounded"/> : <div className="w-full h-24 bg-gray-100 rounded flex items-center justify-center text-xs text-gray-500">–Ω–µ—Ç —Ñ–æ—Ç–æ</div>}
              </div>
              <div className="mt-2 flex items-center justify-between">
                <div className="font-bold">‚ÇΩ {i.price}</div>
                <div className="flex gap-2">
                  <button className="px-3 py-1 rounded bg-[#0b5c3b] text-white" onClick={()=>addToCart(i)}>–í —á–µ–∫</button>
                  <button className="px-3 py-1 rounded bg-gray-100" onClick={()=>openTech(i)}>–¢–µ—Ö–∫–∞—Ä—Ç–∞</button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </Card>
      <Card title="–ß–µ–∫">
        {cart.length===0? <div className="text-sm text-gray-500">–ü—É—Å—Ç–æ</div> : (
          <div className="space-y-2">
            {cart.map(r=>(
              <div key={r.key} className="rounded border p-2 bg-white">
                <div className="flex items-center justify-between"><div className="font-medium">{r.name}</div><button className="text-xs text-red-600" onClick={()=>removeRow(r)}>—É–±—Ä–∞—Ç—å</button></div>
                <div className="flex items-center justify-between mt-1 text-sm">
                  <div className="flex items-center gap-2"><button className="px-2 rounded bg-gray-100" onClick={()=>dec(r)}>-</button><div>{r.qty}</div><button className="px-2 rounded bg-gray-100" onClick={()=>inc(r)}>+</button></div>
                  <div>‚ÇΩ {r.price*r.qty}</div>
                </div>
              </div>
            ))}
            <div className="flex items-center justify-between pt-2 border-t font-semibold"><div>–ò—Ç–æ–≥–æ</div><div>‚ÇΩ {total}</div></div>
            <div className="grid grid-cols-3 gap-2 mt-2"><button className="px-3 py-2 rounded bg-white border">–ù–∞–ª</button><button className="px-3 py-2 rounded bg-white border">–ö–∞—Ä—Ç–∞</button><button className="px-3 py-2 rounded bg-white border">–°–ë–ü</button></div>
            <button className="mt-2 w-full px-3 py-3 rounded bg-[#0b5c3b] text-white">–ü—Ä–æ–±–∏—Ç—å —á–µ–∫</button>
          </div>
        )}
      </Card>
      {editingId!==null && (
        <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
          <div className="w-full max-w-2xl bg-white rounded-2xl p-5">
            <div className="flex items-center justify-between mb-3"><div className="text-lg font-semibold">–¢–µ—Ö–∫–∞—Ä—Ç–∞</div><button onClick={()=>setEditingId(null)} className="px-3 py-1 rounded bg-gray-100">–ó–∞–∫—Ä—ã—Ç—å</button></div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <div className="text-sm font-medium mb-1">–û–ø–∏—Å–∞–Ω–∏–µ</div>
                <textarea className="w-full rounded border px-3 py-2" rows={4} value={techDesc} onChange={e=>setTechDesc(e.target.value)} />
                <div className="text-sm font-medium mb-1 mt-3">–°–æ—Å—Ç–∞–≤ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã)</div>
                <textarea className="w-full rounded border px-3 py-2" rows={6} placeholder="–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç ‚Äî –≥—Ä–∞–º–º—ã\n..." value={techComp} onChange={e=>setTechComp(e.target.value)} />
              </div>
              <div>
                <div className="text-sm font-medium mb-1">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</div>
                <input type="file" accept="image/*" onChange={e=>onTechPhoto(e.target.files?.[0]||null)} />
                {techPhoto && <img src={techPhoto} alt="—Ñ–æ—Ç–æ" className="mt-2 w-full h-40 object-cover rounded" />}
                <div className="text-sm font-medium mb-1 mt-3">–§–∞–π–ª—ã (PDF/JPG –∏ –¥—Ä.)</div>
                <input type="file" multiple onChange={e=>onTechFiles(e.target.files)} />
                {techFiles.length>0 && (<ul className="mt-2 list-disc ml-5 text-sm text-gray-700">{techFiles.map((u,idx)=>(<li key={idx}><a href={u} target="_blank" rel="noreferrer" className="text-blue-600 underline">–í–ª–æ–∂–µ–Ω–∏–µ {idx+1}</a></li>))}</ul>)}
              </div>
            </div>
            <div className="mt-4 flex justify-end gap-2"><button onClick={()=>setEditingId(null)} className="px-4 py-2 rounded bg-gray-100">–û—Ç–º–µ–Ω–∞</button><button onClick={saveTech} className="px-4 py-2 rounded bg-[#0b5c3b] text-white">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button></div>
          </div>
        </div>
      )}
    </div>
  );
}

function EDO(){ return (<div className="space-y-4"><Card title="–ù–∞–∫–ª–∞–¥–Ω—ã–µ (–≠–î–û)">–§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É/–¥–∞—Ç–µ ‚Ä¢ –≤—Ö–æ–¥—è—â–∏–µ/–∏—Å—Ö–æ–¥—è—â–∏–µ –£–ü–î ‚Ä¢ –ø–æ–¥–ø–∏—Å—å –ö–≠–ü ‚Ä¢ —Å—Ç–∞—Ç—É—Å—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Ä¢ –∞—Ä—Ö–∏–≤.</Card><Card title="–ß–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–æ–≤ DataMatrix ‚Ä¢ —Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ ‚Ä¢ –∞–≥—Ä–µ–≥–∞—Ü–∏—è/—Å–Ω—è—Ç–∏–µ —Å —É—á—ë—Ç–∞.</Card><Card title="–ú–µ—Ä–∫—É—Ä–∏–π">–í–°–î ‚Ä¢ –ø–æ–≥–∞—à–µ–Ω–∏–µ/—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–π ‚Ä¢ –∞–ª–µ—Ä—Ç—ã –ø—Ä–æ—Å—Ä–æ—á–µ–∫ ‚Ä¢ –æ–±—Ä–∞—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.</Card></div>); }
function Mercury(){ return (<Card title="–ú–µ—Ä–∫—É—Ä–∏–π (–í–°–î)">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –í–ï–¢–ò–°.API ‚Ä¢ –ø—Ä–∏—ë–º/–ø–æ–≥–∞—à–µ–Ω–∏–µ ‚Ä¢ –∂—É—Ä–Ω–∞–ª—ã –ø–∞—Ä—Ç–∏–π ‚Ä¢ —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ç–µ—Ö–∫–∞—Ä—Ç–∞–º.</Card>); }
function HonestSign(){ return (<Card title="–ß–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫">–£—á—ë—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ ‚Ä¢ –ø—Ä–∏—ë–º –∫–æ–¥–æ–≤ ‚Ä¢ —Å—Ç–∞—Ç—É—Å—ã ‚Ä¢ —Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.</Card>); }
function EGAIS(){ return (<div className="space-y-4"><Card title="–ï–ì–ê–ò–° ‚Äî —Ä–µ–∂–∏–º">–ú–∞–≥–∞–∑–∏–Ω (–±—É—Ç—ã–ª–æ—á–Ω–æ–µ) / –†–µ—Å—Ç–æ—Ä–∞–Ω (—Ä–∞–∑–ª–∏–≤)</Card><Card title="–§–æ—Ä–º—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"><div className="grid grid-cols-1 md:grid-cols-3 gap-4"><div className="bg-white rounded-xl border p-3"><h4 className="font-semibold mb-2">–ü—Ä–∏—ë–º –¢–¢–ù</h4><LabeledInput label="–ù–æ–º–µ—Ä –¢–¢–ù" placeholder="000000000" value={""} onChange={()=>{}} /><button className="px-3 py-2 rounded bg-[#0b5c3b] text-white">–ü—Ä–∏–Ω—è—Ç—å</button></div><div className="bg-white rounded-xl border p-3"><h4 className="font-semibold mb-2">–í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫—É</h4><LabeledInput label="–û—Å–Ω–æ–≤–∞–Ω–∏–µ" placeholder="–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ" value={""} onChange={()=>{}} /><button className="px-3 py-2 rounded bg-gray-100">–°–æ–∑–¥–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç</button></div><div className="bg-white rounded-xl border p-3"><h4 className="font-semibold mb-2">–°–ø–∏—Å–∞–Ω–∏–µ</h4><LabeledInput label="–ü—Ä–∏—á–∏–Ω–∞" placeholder="–ø–æ—Ä—á–∞/–ø—Ä–æ–ª–∏–≤/—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è" value={""} onChange={()=>{}} /><button className="px-3 py-2 rounded bg-gray-100">–°–ø–∏—Å–∞—Ç—å</button></div></div><div className="mt-3">–ñ—É—Ä–Ω–∞–ª –ø–∞—Ä—Ç–∏–π (GUID, —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏, –ø—Ä–∏—á–∏–Ω—ã —Å–ø–∏—Å–∞–Ω–∏–π)</div></Card></div>); }

function Couriers(){ const [list,setList]=useState([{id:1,name:"–ê–ª–µ–∫—Å–µ–π",phone:"+7 900 000-00-01",status:"free"},{id:2,name:"–ú–∞—Ä–∏–Ω–∞",phone:"+7 900 000-00-02",status:"to-order"},{id:3,name:"–ü–∞–≤–µ–ª",phone:"+7 900 000-00-03",status:"back"}]); const label=s=>s==="to-order"?"–ï–¥–µ—Ç –Ω–∞ –∑–∞–∫–∞–∑": s==="back"?"–ü–µ—Ä–µ–¥–∞–ª, –µ–¥–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ":"–°–≤–æ–±–æ–¥–µ–Ω"; const color=s=>s==="to-order"?COLORS.red: s==="back"?COLORS.blue: COLORS.yellow; return (<Card title="–ö—É—Ä—å–µ—Ä—ã"><table className="w-full text-left text-sm"><thead><tr className="text-gray-500"><th className="py-2">–ö—É—Ä—å–µ—Ä</th><th>–¢–µ–ª–µ—Ñ–æ–Ω</th><th>–°—Ç–∞—Ç—É—Å</th><th></th></tr></thead><tbody>{list.map(c=>(<tr key={c.id} className="border-t"><td className="py-2">{c.name}</td><td>{c.phone}</td><td><span className="px-3 py-1 rounded-full text-white" style={{background:color(c.status)}}>{label(c.status)}</span></td><td><div className="flex gap-2"><button className="px-3 py-1 rounded" style={{background:COLORS.red,color:'#fff'}} onClick={()=>setList(list.map(x=>x.id===c.id?{...x,status:"to-order"}:x))}>–ï–¥–µ—Ç –Ω–∞ –∑–∞–∫–∞–∑</button><button className="px-3 py-1 rounded" style={{background:COLORS.blue,color:'#fff'}} onClick={()=>setList(list.map(x=>x.id===c.id?{...x,status:"back"}:x))}>–ü–µ—Ä–µ–¥–∞–ª, –µ–¥–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ</button><button className="px-3 py-1 rounded" style={{background:COLORS.yellow}} onClick={()=>setList(list.map(x=>x.id===c.id?{...x,status:"free"}:x))}>–°–≤–æ–±–æ–¥–µ–Ω</button></div></td></tr>))}</tbody></table></Card>); }

function Inventory(){ const [people]=useState([{id:1,name:"–ò—Ä–∏–Ω–∞",role:"–ø–æ–≤–∞—Ä"},{id:2,name:"–î–µ–Ω–∏—Å",role:"–ø–æ–≤–∞—Ä"},{id:3,name:"–°–≤–µ—Ç–ª–∞–Ω–∞",role:"–∫–ª–∞–¥–æ–≤—â–∏–∫"}]); const [rows,setRows]=useState([{id:1,name:"–°—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞",sys:4.5,fact:0},{id:2,name:"–ú—É–∫–∞",sys:12,fact:0},{id:3,name:"–õ–æ—Å–æ—Å—å",sys:3.2,fact:0}]); return (<div className="space-y-4"><Card title="–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"><div className="flex flex-wrap gap-3">{people.map(p=>(<span key={p.id} className="px-3 py-1 rounded-full bg-white/60">{p.name} ‚Äî {p.role}</span>))}</div></Card><Card title="–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è ‚Äî –∫—É—Ö–Ω—è"><table className="w-full text-left text-sm"><thead><tr className="text-gray-500"><th className="py-2">–¢–æ–≤–∞—Ä</th><th>–°–∏—Å—Ç–µ–º–∞</th><th>–§–∞–∫—Ç</th></tr></thead><tbody>{rows.map(r=>(<tr key={r.id} className="border-t"><td className="py-2">{r.name}</td><td>{r.sys} –∫–≥</td><td><input className="w-24 rounded border px-2 py-1" type="number" step="0.1" value={r.fact} onChange={(e)=>setRows(rows.map(x=>x.id===r.id?{...x,fact:parseFloat(e.target.value||"0")}:x))}/> –∫–≥</td></tr>))}</tbody></table></Card></div>); }

function Pricing(){ const [cost,setCost]=useState(220); const [targetMargin,setTargetMargin]=useState(0.24); const recPrice=useMemo(()=>Math.ceil(cost/Math.max(1-targetMargin,0.0001)/10)*10,[cost,targetMargin]); return (<Card title="–ü–µ—Ä–µ—Å—á—ë—Ç —Ü–µ–Ω –ø–æ —Ä–æ—Å—Ç—É –∑–∞–∫—É–ø–æ–∫"><div className="grid grid-cols-1 md:grid-cols-3 gap-4"><div><div className="text-sm mb-1">–ù–æ–≤–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</div><input className="w-full rounded border px-3 py-2" type="number" value={cost} onChange={(e)=>setCost(parseFloat(e.target.value||"0"))}/></div><div><div className="text-sm mb-1">–¶–µ–ª–µ–≤–∞—è –º–∞—Ä–∂–∞</div><input className="w-full rounded border px-3 py-2" type="number" step="0.01" value={targetMargin} onChange={(e)=>setTargetMargin(parseFloat(e.target.value||"0"))}/></div><div className="flex items-end"><div className="w-full bg-white rounded-xl p-3 border text-center">–†–µ–∫–æ–º. —Ü–µ–Ω–∞: <b>‚ÇΩ {recPrice}</b></div></div></div><div className="text-xs text-gray-500 mt-2">–ü—Ä–∞–≤–∏–ª–æ: —Ñ–∏–∫—Å–∏—Ä—É–µ–º –º–∞—Ä–∂—É, –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 10‚ÇΩ.</div></Card>); }

function Marketing(){
  const [state,setState]=useState({
    ybiz:{connected:false, token:"", budget:10000, clicks:0, conv:0},
    ydirect:{connected:false, token:"", budget:15000, clicks:0, conv:0},
    gads:{connected:false, token:"", budget:20000, clicks:0, conv:0},
    insta:{connected:false, token:"", budget:12000, clicks:0, conv:0},
    fb:{connected:false, token:"", budget:15000, clicks:0, conv:0},
  });
  function Tile({name,keyName}){
    return (
      <div className="rounded-2xl border bg-white p-4">
        <div className="font-semibold mb-2">{name}</div>
        <div className="flex items-center justify-between mb-2">
          <label className="inline-flex items-center gap-2">
            <input type="checkbox" checked={state[keyName].connected} onChange={(e)=>setState({...state,[keyName]:{...state[keyName],connected:e.target.checked}})} />
            <span>{state[keyName].connected? '–ø–æ–¥–∫–ª—é—á–µ–Ω–æ':'–≤—ã–∫–ª—é—á–µ–Ω–æ'}</span>
          </label>
          <button className="px-3 py-1 rounded bg-gray-100">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          <div>
            <div className="text-sm mb-1">API —Ç–æ–∫–µ–Ω</div>
            <input className="w-full rounded border px-3 py-2" value={state[keyName].token} onChange={(e)=>setState({...state,[keyName]:{...state[keyName],token:e.target.value}})} />
          </div>
          <div>
            <div className="text-sm mb-1">–ë—é–¥–∂–µ—Ç, ‚ÇΩ</div>
            <input type="number" className="w-full rounded border px-3 py-2" value={state[keyName].budget} onChange={(e)=>setState({...state,[keyName]:{...state[keyName],budget:parseFloat(e.target.value||'0')}})} />
          </div>
        </div>
        <div className="mt-3 text-sm text-gray-600">–ö–ª–∏–∫–∏: {state[keyName].clicks} ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {state[keyName].conv} ‚Ä¢ ROI: ‚Äî</div>
        <div className="mt-3 flex gap-2">
          <button className="px-3 py-2 rounded bg-[#0b5c3b] text-white">–°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é</button>
          <button className="px-3 py-2 rounded bg-gray-100">–û—Ç—á—ë—Ç</button>
        </div>
      </div>
    );
  }
  return (
    <div className="space-y-4">
      <Card title="–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –±—ã—Å—Ç—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</Card>
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
        <Tile name="–Ø–Ω–¥–µ–∫—Å –ë–∏–∑–Ω–µ—Å" keyName="ybiz"/>
        <Tile name="–Ø–Ω–¥–µ–∫—Å –î–∏—Ä–µ–∫—Ç" keyName="ydirect"/>
        <Tile name="Google Ads" keyName="gads"/>
        <Tile name="Instagram Ads" keyName="insta"/>
        <Tile name="Facebook Ads" keyName="fb"/>
      </div>
    </div>
  );
}

function Integrations(){
  const [agg,setAgg]=useState({yandex:true,delivery:true,vkusvill:false});
  const [logs,setLogs]=useState([]);
  function addLog(level,msg){ const time=new Date().toLocaleTimeString(); setLogs(prev=>[{time,level,msg},...prev].slice(0,50)); }
  return (
    <div className="space-y-4">
      <Card title="–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          <ToggleCard label="–Ø–Ω–¥–µ–∫—Å –ï–¥–∞" checked={agg.yandex} onChange={(v)=>{setAgg({...agg,yandex:v});addLog('info',`–Ø–Ω–¥–µ–∫—Å –ï–¥–∞: ${v?'–≤–∫–ª':'–≤—ã–∫–ª'}`);}}/>
          <ToggleCard label="Delivery" checked={agg.delivery} onChange={(v)=>{setAgg({...agg,delivery:v});addLog('info',`Delivery: ${v?'–≤–∫–ª':'–≤—ã–∫–ª'}`);}}/>
          <ToggleCard label="–í–∫—É—Å–í–∏–ª–ª" checked={agg.vkusvill} onChange={(v)=>{setAgg({...agg,vkusvill:v});addLog('info',`–í–∫—É—Å–í–∏–ª–ª: ${v?'–≤–∫–ª':'–≤—ã–∫–ª'}`);}}/>
        </div>
      </Card>
      <Card title="–ñ—É—Ä–Ω–∞–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π">
        <div className="max-h-48 overflow-auto bg-white/50 rounded border">
          <ul className="text-xs">{logs.map((l,i)=>(<li key={i} className="px-2 py-1 border-b">{l.time} ‚Ä¢ {l.msg}</li>))}</ul>
        </div>
      </Card>
    </div>
  );
}
function ToggleCard({label,checked,onChange}){ return (<div className="rounded-xl border p-3 flex items-center justify-between"><span>{label}</span><label className="inline-flex items-center gap-2"><input type="checkbox" checked={checked} onChange={(e)=>onChange(e.target.checked)}/><span>{checked?"–≤–∫–ª—é—á–µ–Ω–æ":"–≤—ã–∫–ª—é—á–µ–Ω–æ"}</span></label></div>); }

function ReportsPage(){
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-5">
      <Card title="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç">–í—ã—Ä—É—á–∫–∞/–†–∞—Å—Ö–æ–¥—ã/–ù–∞–ª–æ–≥–∏ ‚Ä¢ –ø–µ—Ä–∏–æ–¥ ‚Ä¢ —ç–∫—Å–ø–æ—Ä—Ç PDF/XLSX</Card>
      <Card title="–ö–∞—Å—Å–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã">X/Z ‚Ä¢ –æ—Ç—á—ë—Ç –∫–∞—Å—Å–∏—Ä–∞ ‚Ä¢ —Å–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç</Card>
      <Card title="–°–∫–ª–∞–¥">–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏/–°–ø–∏—Å–∞–Ω–∏—è/–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</Card>
      <Card title="–≠–î–û/–ú–µ—Ä–∫—É—Ä–∏–π/–ß–ó/–ï–ì–ê–ò–°">–°—Ç–∞—Ç—É—Å—ã –∏ –∂—É—Ä–Ω–∞–ª—ã</Card>
    </div>
  );
}

function Alerts(){
  return (
    <Card title="–¶–µ–Ω—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π">–ò–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–Ω—é/—Ü–µ–Ω, —Å—Ä–æ–∫–∏ –æ–ø–ª–∞—Ç –ø–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–º, –Ω–∞–ª–æ–≥–∏, –ö–≠–ü/–û–§–î, –ï–ì–ê–ò–°, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ —ç—Å–∫–∞–ª–∞—Ü–∏—è.</Card>
  );
}

// ===== –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –≤–∏—Ç—Ä–∏–Ω–∞ =====
function ClientPanel({items}){
  const [cat,setCat]=useState('–í—Å–µ');
  const [q,setQ]=useState('');
  const cats=useMemo(()=>['–í—Å–µ',...Array.from(new Set(items.map(i=>i.cat)))],[items]);
  const [cart,setCart]=useState([]);
  const filtered=items.filter(i=>(cat==='–í—Å–µ'||i.cat===cat) && (!q||i.name.toLowerCase().includes(q.toLowerCase())));
  const total=cart.reduce((s,r)=>s+r.price*r.qty,0);
  function add(i){ setCart(prev=>{ const idx=prev.findIndex(r=>r.id===i.id); if(idx>-1){ const c=[...prev]; c[idx]={...c[idx],qty:c[idx].qty+1}; return c; } return [...prev,{id:i.id,name:i.name,price:i.price,qty:1}]; }); }
  function inc(id){ setCart(prev=>prev.map(r=>r.id===id?{...r,qty:r.qty+1}:r)); }
  function dec(id){ setCart(prev=>prev.map(r=>r.id===id?{...r,qty:Math.max(1,r.qty-1)}:r)); }
  function remove(id){ setCart(prev=>prev.filter(r=>r.id!==id)); }
  return (
    <div className="grid grid-cols-1 lg:grid-cols-[220px_1fr_360px] gap-4">
      <Card title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏">
        <div className="mb-3"><input className="w-full rounded border px-3 py-2" placeholder="–ü–æ–∏—Å–∫‚Ä¶" value={q} onChange={(e)=>setQ(e.target.value)} /></div>
        <div className="flex lg:flex-col gap-2 flex-wrap">{cats.map(c=>(<button key={c} onClick={()=>setCat(c)} className={`px-3 py-2 rounded ${cat===c?'bg-[#0b5c3b] text-white':'bg-white'}`}>{c}</button>))}</div>
      </Card>
      <Card title="–ú–µ–Ω—é (–∫–ª–∏–µ–Ω—Ç)">
        <div className="grid grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-3">
          {filtered.map(i=> (
            <div key={i.id} className="rounded-xl border bg-white p-3 flex flex-col">
              <div className="flex-1">
                <div className="text-sm font-semibold mb-1">{i.name}</div>
                <div className="text-xs text-gray-500 mb-2">{i.cat}</div>
                {i.photo? <img src={i.photo} alt="—Ñ–æ—Ç–æ" className="w-full h-24 object-cover rounded"/> : <div className="w-full h-24 bg-gray-100 rounded flex items-center justify-center text-xs text-gray-500">–Ω–µ—Ç —Ñ–æ—Ç–æ</div>}
              </div>
              <div className="mt-2 flex items-center justify-between">
                <div className="font-bold">‚ÇΩ {i.price}</div>
                <button className="px-3 py-1 rounded bg-[#0b5c3b] text-white" onClick={()=>add(i)}>–í –∫–æ—Ä–∑–∏–Ω—É</button>
              </div>
            </div>
          ))}
        </div>
      </Card>
      <Card title="–ö–æ—Ä–∑–∏–Ω–∞">
        {cart.length===0? <div className="text-sm text-gray-500">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è</div> : (
          <div className="space-y-2">
            {cart.map(r=> (
              <div key={r.id} className="rounded border p-2 bg-white">
                <div className="flex items-center justify-between"><div className="font-medium">{r.name}</div><button className="text-xs text-red-600" onClick={()=>remove(r.id)}>—É–±—Ä–∞—Ç—å</button></div>
                <div className="flex items-center justify-between mt-1 text-sm">
                  <div className="flex items-center gap-2"><button className="px-2 rounded bg-gray-100" onClick={()=>dec(r.id)}>-</button><div>{r.qty}</div><button className="px-2 rounded bg-gray-100" onClick={()=>inc(r.id)}>+</button></div>
                  <div>‚ÇΩ {r.price*r.qty}</div>
                </div>
              </div>
            ))}
            <div className="flex items-center justify-between pt-2 border-t font-semibold"><div>–ò—Ç–æ–≥–æ</div><div>‚ÇΩ {total}</div></div>
            <button className="mt-2 w-full px-3 py-3 rounded bg-[#0b5c3b] text-white">–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ (–¥–µ–º–æ)</button>
          </div>
        )}
      </Card>
    </div>
  );
}

function Profile(){
  const [twofa,setTwofa]=useState(false);
  return (
    <Card title="–ü—Ä–æ—Ñ–∏–ª—å">
      <div className="space-y-2">
        <label className="inline-flex items-center gap-2"><input type="checkbox" checked={twofa} onChange={(e)=>setTwofa(e.target.checked)}/>–í–∫–ª—é—á–∏—Ç—å 2–§–ê</label>
        <div>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ ‚Ä¢ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è</div>
      </div>
    </Card>
  );
}
